#%RAML 1.0
---
title: Soundcube
# baseUri: http://example.com/{version}
version: v1

uses:
  Types: types.raml

securitySchemes:
  token: !include security_token.raml

securedBy: token

traits:
  commonErrors: !include common-errors.raml

/ping:
  get:
    securedBy: null
    description: Responds with a pong, leting you know if the service is alive

    responses:
      200:
        body:
          application/json:
            properties:
              pong: string
            example: { "pong": "ok" }

/auth:
  /login:
    post:
      is: [commonErrors]
      securedBy: null
      description: Provide the global (admin) password for Soundcube and receive a unique token for further requests
      body:
        application/json:
          type: object
          properties:
            password: string
          example: |
            {
              "password": "password123"
            }
      responses:
        200:
          description: Returns status and the token for future requests
          body:
            application/json:
              type: object
              properties:
                status: Types.Status
                token: string
              example: |
                {
                  "status": "ok",
                  "token": "4g7dshi348329zdsifh3"
                }
        401:
          description: Password not provided or invalid
          body:
            application/json:
              type: object
              properties:
                status: Types.Status
              example:  { "status": "error" }
        403:
          description: Password is not correct
          body:
            application/json:
              type: object
              properties:
                status: Types.Status
              example: { "status": "forbidden" }

  /logout:
    post:
      is: [commonErrors]
      description: Invalidates your token
      responses:
        200:
          body:
            application/json:
              properties:
                status: Types.Status
              example: { "status": "ok" }

  /youtubeApiKey:
    get:
      is: [commonErrors]
      description: Returns a valid Youtube v3 API key for use in the react app
      responses:
        200:
          body:
            application/json:
              properties:
                status: Types.Status
                api_key: string
              example: { "status": "ok", "api_key": "ih3iaASioSD_aosidcxn125" }

/music:
  /queue:
    /get:
      get:
        is: [commonErrors]
        responses:
          200:
            description: Get the current queue
            body:
              application/json:
                properties:
                  queue: Types.Queue
                  current_song:
                    type: integer
                    description: Index of the current song
                example: |
                  {
                    "queue": [],
                    "current_song": 0
                  }

    /add:
      post:
        is: [commonErrors]
        description: Add a song to the queue
        body:
          application/json:
            type: object
            properties:
              song: string
              position: integer
              set_playing:
                type: boolean
                required: false
            example: |
              {
                "song": "song_id",
                "position": 0,
                "set_playing": false
              }
        responses:
          200:
            body:
              application/json:
                properties:
                  new_queue: Types.Queue
                  status: Types.Status
                example: |
                  {
                    "new_queue": [
                      {
                        "video_id": "bS1yWpVlRlc",
                        "title": "Asimov | 65daysofstatic (No Manâ€™s Sky)",
                        "length": 351,
                        "username": "TheInspirationalMind",
                        "published": "2016-08-05 01:07:09",
                        "viewcount": 116242
                      },
                      {
                        "video_id": "YTpBVMHKjc4",
                        "title": "65daysofstatic - Debutante (No Man's Sky)",
                        "length": 442,
                        "username": "EpicVideoGameMusic1",
                        "published": "2014-01-23 19:51:13",
                        "viewcount": 335469
                      }
                    ],
                    "status": "ok"
                  }
          441:
            description: Youtube video ID is invalid
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }

    /remove:
      delete:
        is: [commonErrors]
        description: Remove a song from the queue
        body:
          application/json:
            properties:
              position: integer
            example: |
              {
                "position": 0
              }
        responses:
          200:
            description: Song removed from the queue
            body:
              application/json:
                properties:
                  new_queue: Types.Queue
                  status: Types.Status
                example: |
                  {
                    "new_queue": [
                      {
                        "video_id": "jLRw-Ahq22k",
                        "title": "Snarky Puppy, Metropole Orkest - The Curtain",
                        "length": 885,
                        "username": "Snarky Puppy",
                        "published": "2015-04-06 14:05:11",
                        "viewcount": 2085988
                      }
                    ],
                    "status": "ok"
                  }
          441:
            description: Couldn't remove the song, no such index
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }

    /move:
      patch:
        is: [commonErrors]
        description: Move a song through the queue
        body:
          application/json:
            type: object
            properties:
              current_index: integer
              new_index:
                type: integer
                description: After which song (index) to insert the song at current_index
            example: |
              {
                "current_index": 2,
                "new_index": 5
              }
        responses:
          200:
            description: Song has been moved
            body:
              application/json:
                properties:
                  new_queue: Types.Queue
                  status: Types.Status
                example: |
                  {
                    "new_queue": [
                      {
                        "video_id": "jLRw-Ahq22k",
                        "title": "Snarky Puppy, Metropole Orkest - The Curtain",
                        "length": 885,
                        "username": "Snarky Puppy",
                        "published": "2015-04-06 14:05:11",
                        "viewcount": 2085988
                      }
                    ],
                    "status": "ok"
                  }


  /player:
    /quickQueue:
      post:
        is: [commonErrors]
        description: Queue a song (simple operations only)
        body:
          application/json:
            properties:
              song: string
              type: Types.PlayType
            example: |
              {
                "song": "song_id",
                "type": "next"
              }
        responses:
          400:
            description: YouTube video ID is invalid
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }

    /getCurrentSong:
      get:
        is: [commonErrors]
        description: Returns info about the current song
        responses:
          200:
            description: Returns the current song
            body:
              application/json:
                properties:
                  current_song: Types.YoutubeVideo
                  is_playing: boolean
                  time:
                    description: Time in seconds, null if not playing
                    type: integer
                    required: false
                  status: Types.Status
                example: |
                  {
                    "current_song": {
                        "video_id": "jLRw-Ahq22k",
                        "title": "Snarky Puppy, Metropole Orkest - The Curtain",
                        "length": 885,
                        "username": "Snarky Puppy",
                        "published": "2015-04-06 14:05:11",
                        "viewcount": 2085988
                      },
                    "is_playing": true,
                    "time": 125,
                    "status": "ok"
                  }
          440:
            description: No song is loaded
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "noop" }

    /play:
      post:
        is: [commonErrors]
        description: Play the current song
        responses:
          200:
            description: Song is now playing
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }

          440:
            description: Song was already playing
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "noop" }

          441:
            description: No song in queue / loaded
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }

    /pause:
      post:
        is: [commonErrors]
        description: Pause the current song
        responses:
          200:
            description: Song has been paused
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }

          440:
            description: No song was playing
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "noop" }

    /resume:
      post:
        is: [commonErrors]
        description: Resumes the current song
        responses:
          200:
            description: Song resumed
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }
          440:
            description: Song was already playing
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "noop" }
          441:
            description: No song loaded
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }

    /stop:
      post:
        is: [commonErrors]
        description: Stop the current song
        responses:
          200:
            description: Song has been stopped
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }
          440:
            description: Song was already stopped
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "noop" }

    /next:
      post:
        is: [commonErrors]
        description: Skip to the next song in queue
        responses:
          200:
            description: Song skipped
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }
          441:
            description: No next song
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }

    /previous:
      post:
        is: [commonErrors]
        description: Play the previous song in queue
        responses:
          200:
            description: Playing previous song
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }
          441:
            description: No previous song, can't play
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }

    /audioTime:
      get:
        is: [commonErrors]
        description: Get the current audio time
        responses:
          200:
            description: Returns the audio time in seconds
            body:
              application/json:
                properties:
                  status: Types.Status
                  time: integer
                  total_length: integer
                  is_playing: boolean
                example: |
                  {
                    "status": "ok",
                    "time": 126,
                    "total_length": 431,
                    "is_playing": true
                  }
          441:
            description: No song is playing
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }

      patch:
        is: [commonErrors]
        description: Scrub the current song to a specified timestamp
        body:
          application/json:
            properties:
              time: number
            example: { "time": 535}
        responses:
          200:
            description: Song playing from timestamp
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }
          440:
            description: No song is playing, can't scrub
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "noop" }
          441:
            description: Can't scrub to required point, song is not that long
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }
