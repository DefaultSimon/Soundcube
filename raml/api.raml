#%RAML 1.0
---
title: Soundcube
# baseUri: http://example.com/{version}
version: v1

uses:
  Types: types.raml

securitySchemes:
  token: !include security_token.raml

securedBy: token

traits:
  commonErrors: !include common-errors.raml

/ping:
  get:
    securedBy: null
    description: Responds with a pong, leting you know if the service is alive

    responses:
      200:
        body:
          application/json:
            properties:
              pong: string
            example: { "pong": "ok" }

/auth:
  /login:
    post:
      is: [commonErrors]
      securedBy: null
      description: Provide the global (admin) password for Soundcube and receive a unique token for further requests
      body:
        application/json:
          type: object
          properties:
            password: string
          example: |
            {
              "password": "password123"
            }
      responses:
        200:
          description: Returns status and the token for future requests
          body:
            application/json:
              type: object
              properties:
                status: Types.Status
                token: string
              example: |
                {
                  "status": "ok",
                  "token": "4g7dshi348329zdsifh3"
                }
        401:
          description: Password not provided or invalid
          body:
            application/json:
              type: object
              properties:
                status: Types.Status
              example:  { "status": "error" }
        403:
          description: Password is not correct
          body:
            application/json:
              type: object
              properties:
                status: Types.Status
              example: { "status": "forbidden" }

  /logout:
    post:
      is: [commonErrors]
      description: Invalidates your token
      responses:
        200:
          body:
            application/json:
              properties:
                status: Types.Status
              example: { "status": "ok" }

/music:
  /queue:
    /get:
      get:
        is: [commonErrors]
        responses:
          200:
            description: Get the current queue
            body:
              application/json:
                properties:
                  queue: array
                example: { "queue": [] }

    /add:
      post:
        is: [commonErrors]
        description: Add a song to the queue
        body:
          application/json:
            type: object
            properties:
              song: string
              position: integer
            example: |
              {
                "song": "song_id",
                "position": 0
              }

    /remove:
      delete:
        is: [commonErrors]
        description: Remove a song from the queue
        body:
          application/json:
            type: object
            properties:
              song: string
            example: |
              {
                "song": "song_id"
              }

    /move:
      patch:
        is: [commonErrors]
        description: Move a song through the queue
        body:
          application/json:
            type: object
            properties:
              song: string
              new_index: integer
            example: |
              {
                "song": "song_id",
                "new_index": 5
              }

  /player:
    /queue:
      post:
        is: [commonErrors]
        description: Queue a song
        body:
          application/json:
            properties:
              song: string
              type: Types.PlayType
            example: |
              {
                "song": "song_id",
                "type": "next"
              }

    /play:
      post:
        is: [commonErrors]
        description: Play the current song
        responses:
          200:
            description: Song is now playing
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }

          440:
            description: Song was already playing
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "noop" }

          441:
            description: No song in queue / loaded
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }

    /pause:
      post:
        is: [commonErrors]
        description: Pause the current song
        responses:
          200:
            description: Song has been paused
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }

          440:
            description: No song was playing
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "noop" }

    /resume:
      post:
        is: [commonErrors]
        description: Resumes the current song
        responses:
          200:
            description: Song resumed
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }
          440:
            description: Song was already playing
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "noop" }
          441:
            description: No song loaded
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }

    /stop:
      post:
        is: [commonErrors]
        description: Stop the current song
        responses:
          200:
            description: Song has been stopped
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }
          440:
            description: Song was already stopped
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "noop" }

    /next:
      post:
        is: [commonErrors]
        description: Skip to the next song in queue
        responses:
          200:
            description: Song skipped
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }
          440:
            description: No next song
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }

    /previous:
      post:
        is: [commonErrors]
        description: Play the previous song in queue
        responses:
          200:
            description: Playing previous song
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }
          405:
            description: No previous song, can't play
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }

    /scrub:
      patch:
        is: [commonErrors]
        description: Scrub the current song to a specified timestamp
        body:
          application/json:
            properties:
              time: time-only
            example: { "time": "00:05:15"}
        responses:
          200:
            description: Song playing from timestamp
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "ok" }
          440:
            description: No song is playing, can't scrub
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "noop" }
          441:
            description: Can't scrub to required point, song is not that long
            body:
              application/json:
                properties:
                  status: Types.Status
                example: { "status": "error" }
